<?php

namespace App\Http\Controllers;
use App\Mail\VetementsRetirerMail;
use App\Models\Vetement;
use App\Models\Lavage;
use App\Models\Emplacement;


use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Mail\VetementsPretsMail;
use App\Mail\VetementsEnLavageMail;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;


class VetementController extends Controller
{

    public function retirer(Vetement $vetement)
{
    $vetement->update(['etat' => 'RetirÃ©']);
    return back()->with('success', 'VÃªtement marquÃ© comme retirÃ©.');
}
 
public function updateEtat(Request $request, $id)
{
    // âœ… Validation des donnÃ©es envoyÃ©es
    $validated = $request->validate([
        'etat' => 'required|in:En lavage,En repassage,TerminÃ©,RetirÃ©',
        'type_consigne' => 'nullable|string'
    ]);

    // âœ… RÃ©cupÃ©rer le vÃªtement Ã  mettre Ã  jour avec la relation lavage et consigne
    $vetement = Vetement::with('lavage.consigne')->findOrFail($id);

     // âœ… Log pour vÃ©rifier les relations
     Log::info("ğŸ’¾ Vetement trouvÃ© :", ['id' => $vetement->id, 'etat_actuel' => $vetement->etat]);

    // âœ… DÃ©terminer le type de consigne

    // VÃ©rifier si lâ€™Ã©tat change correctement
    if ($validated['etat'] === 'En repassage' && $vetement->lavage->consigne->type_consigne === 'Repassage_Simple') {
        Log::info("ğŸ›  Repassage simple dÃ©tectÃ©, laveur_id reste NULL");
        $vetement->laveur_id = null; 
    } elseif ($validated['etat'] === 'En repassage') {
        $vetement->laveur_id = Auth::guard('web')->id();
    }
     elseif ($validated['etat'] === 'TerminÃ©' && $vetement->lavage->consigne->type_consigne === 'Lavage_Simple') {
        $vetement->laveur_id = Auth::guard('web')->id();
        $vetement->repasseur_id = null;
    }
     elseif ($validated['etat'] === 'TerminÃ©') {
        $vetement->repasseur_id = Auth::guard('web')->id();
    }

    // âœ… Mise Ã  jour de l'Ã©tat
    $vetement->etat = $validated['etat'];
    $vetement->save(); // Sauvegarde

    // VÃ©rifier si tous les vÃªtements du lavage sont "TerminÃ©"
    $lavage = Lavage::with('vetements')->findOrFail($vetement->lavage_id);
    $tousPrets = $lavage->vetements->every(fn($v) => $v->etat === 'TerminÃ©');

    if ($tousPrets) {
        Mail::to($lavage->client->email)->send(new VetementsPretsMail($lavage));
    }

    // VÃ©rifier si tous les vÃªtements sont "En lavage"
    $tousEnLavage = $lavage->vetements->every(fn($v) => $v->etat === 'En lavage');

    if ($tousEnLavage) {
        Mail::to($lavage->client->email)->send(new VetementsEnLavageMail($lavage));
    }

    $lavagesRetirer = $lavage->vetements->every(fn($v) => $v->etat === 'RetirÃ©');

    if ($lavagesRetirer) {
        Mail::to($lavage->client->email)->send(new VetementsRetirerMail($lavage));
    }

    return redirect()->back()->with('success', 'Ã‰tat du vÃªtement mis Ã  jour avec succÃ¨s.');
}



public function indexLavage()
{
    // RÃ©cupÃ©rer l'utilisateur connectÃ© (acteur)
    $acteur = Auth::guard('web')->user();

    // VÃ©rifier qu'un acteur est bien connectÃ©
    if (!$acteur) {
        return redirect()->route('acteurs.login'); // Redirection si non connectÃ©
    }



    // RÃ©cupÃ©rer la structure associÃ©e Ã  l'acteur connectÃ©
    $structureId = $acteur->structure_id;

    // RÃ©cupÃ©rer les vÃªtements des lavages liÃ©s Ã  cette structure
    $vetements = Vetement::whereHas('lavage', function ($query) use ($structureId) {
        $query->whereHas('receptionniste', function ($subQuery) use ($structureId) {
            $subQuery->where('structure_id', $structureId);
        });
    })
    ->where('etat', 'En lavage')
    ->with(['categorie', 'type','lavage.consigne'])
    ->get();

    return inertia('TacheLavages', [
        'vetements' => $vetements,
    ]);
}

public function indexRepassage()
{
    // RÃ©cupÃ©rer l'utilisateur connectÃ© (acteur)
    $acteur = Auth::guard('web')->user();

    // VÃ©rifier qu'un acteur est bien connectÃ©
    if (!$acteur) {
        return redirect()->route('acteurs.login'); // Redirection si non connectÃ©
    }

    // RÃ©cupÃ©rer la structure associÃ©e Ã  l'acteur connectÃ©
    $structureId = $acteur->structure_id;

    // RÃ©cupÃ©rer les vÃªtements des lavages liÃ©s Ã  cette structure
    $vetements = Vetement::whereHas('lavage', function ($query) use ($structureId) {
        $query->whereHas('receptionniste', function ($subQuery) use ($structureId) {
            $subQuery->where('structure_id', $structureId);
        });
    })
    ->where('etat', 'En repassage')
    ->with(['categorie', 'type', 'lavage'])
    ->get();

      // RÃ©cupÃ©rer les lavages dont tous les vÃªtements sont terminÃ©s
    $lavagesTermines = Lavage::whereDoesntHave('vetements', function ($query) {
        $query->where('etat', '!=', 'TerminÃ©');
    }) // VÃ©rifie que tous les vÃªtements sont terminÃ©s
    ->whereNull('emplacement_id') // VÃ©rifie que l'emplacement_id est NULL
    ->whereHas('receptionniste', function ($subQuery) use ($structureId) {
        $subQuery->where('structure_id', $structureId);
    })
    ->get();

    // RÃ©cupÃ©rer les emplacements liÃ©s Ã  la structure
    $emplacements = Emplacement::where('structure_id', $structureId)->get();
   

    return inertia('TacheRepassage', [
        'vetements' => $vetements,
        'emplacements' => $emplacements, // Envoi des emplacements Ã  la page
        'lavagesTermines' => $lavagesTermines,
    ]);
}

}
